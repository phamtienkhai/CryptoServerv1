/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kma.cs.view;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.openxml4j.opc.signature.VerifyResult;

import com.kma.cs.model.AlgorithmCrypto;
import com.kma.cs.model.DatabaseCRUD;
import com.kma.cs.utils.CryptoToken;
import com.kma.cs.utils.KeyStoreUtils;
import com.kma.cs.utils.doc.DOCSigner;
import com.kma.cs.utils.pdf.PDFSigner;
import com.kma.cs.utils.pdf.PDFValidator;
import com.kma.cs.utils.xml.XMLSigner;
import com.kma.cs.utils.xml.XMLValidator;
import java.awt.Font;

/**
 *
 * @author ptkat
 */
public class SignatureService extends javax.swing.JFrame {

	private static String fileNameInput;
	private static String fileNameOutput;
	private static String fileKeyStore;
	private static String alg;
	private static String type;
	private static String password;
	private String userName2;

	public void setUsername2(String userName2) {
		this.userName2 = userName2;
	}

	public SignatureService() {

		initComponents();
		Font font = new Font("SansSerif", Font.PLAIN, 25);
        jButton_Cipher.setFont(font);
        jButton_GenerateKey.setFont(font);
        jButton_Input.setFont(font);
        jButton_KeyStore.setFont(font);
        jButton_Output.setFont(font);
        jButton_Sign.setFont(font);
        jButton_Validator.setFont(font);
        jButton_loadKey.setFont(font);
        jComboBox_Type.setFont(font);
        jComboBox_alg.setFont(font);
        jComboBox_aliases.setFont(font);
        jLabel_Input.setFont(font);
        jLabel_KeyStore.setFont(font);
        jLabel_Output.setFont(font);
        jLabel_Passwod.setFont(font);
        jLabel_Type.setFont(font);
        jPasswordField_Password.setFont(font);
        jTextField_Input.setFont(font);
        jTextField_KeyStore.setFont(font);
        jTextField_Output.setFont(font);
        this.setTitle("Signature");
		
		jComboBox_Type.addItem("xml");
		jComboBox_Type.addItem("pdf");
		jComboBox_Type.addItem("ooxml");

//        jComboBox_alg
		String sqlSelect = "select * from algorithmcrypto";
		List listAlg = DatabaseCRUD.getTable(sqlSelect, "algorithmcrypto");
		for (Object object : listAlg) {
			AlgorithmCrypto algorithmCrypto = (AlgorithmCrypto) object;
			if (algorithmCrypto.getType().equals("PublicKey")) {
				jComboBox_alg.addItem("SHA1with" + algorithmCrypto.getAlgorithmName());
//				jComboBox_alg.addItem("SHA224with" + algorithmCrypto.getAlgorithmName());
				jComboBox_alg.addItem("SHA256with" + algorithmCrypto.getAlgorithmName());
				jComboBox_alg.addItem("SHA384with" + algorithmCrypto.getAlgorithmName());
				jComboBox_alg.addItem("SHA512with" + algorithmCrypto.getAlgorithmName());
			}
		}
//		repaint(100, 100, 500, 500);
		this.setLocation(400, 150);
//		this.setSize(1000, 500);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jButton_Output = new javax.swing.JButton();
		jButton_Input = new javax.swing.JButton();
		jButton_Sign = new javax.swing.JButton();
		jButton_GenerateKey = new javax.swing.JButton();
		jButton_Validator = new javax.swing.JButton();
		jLabel_Type = new javax.swing.JLabel();
		jLabel_Output = new javax.swing.JLabel();
		jPasswordField_Password = new javax.swing.JPasswordField();
		jLabel_Input = new javax.swing.JLabel();
		jLabel_Passwod = new javax.swing.JLabel();
		jComboBox_alg = new javax.swing.JComboBox<>();
		jTextField_KeyStore = new javax.swing.JTextField();
		jTextField_Input = new javax.swing.JTextField();
		jTextField_Output = new javax.swing.JTextField();
		jLabel_KeyStore = new javax.swing.JLabel();
		jButton_KeyStore = new javax.swing.JButton();
		jComboBox_Type = new javax.swing.JComboBox<>();
		jButton_Cipher = new javax.swing.JButton();
		jComboBox_aliases = new javax.swing.JComboBox<>();
		jButton_loadKey = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jButton_Output.setText("upload file");
		jButton_Output.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_OutputActionPerformed(evt);
			}
		});

		jButton_Input.setText("upload file");
		jButton_Input.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_InputActionPerformed(evt);
			}
		});

		jButton_Sign.setText("Sign");
		jButton_Sign.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_SignActionPerformed(evt);
			}
		});

		jButton_GenerateKey.setText("Generate Key");
		jButton_GenerateKey.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_GenerateKeyActionPerformed(evt);
			}
		});

		jButton_Validator.setText("Validator");
		jButton_Validator.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_ValidatorActionPerformed(evt);
			}
		});

		jLabel_Type.setText("Type");

		jLabel_Output.setText("Output");

		jPasswordField_Password.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jPasswordField_PasswordActionPerformed(evt);
			}
		});

		jLabel_Input.setText("Input");

		jLabel_Passwod.setText("Password");

		jComboBox_alg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
		jComboBox_alg.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBox_algActionPerformed(evt);
			}
		});

		jLabel_KeyStore.setText("Key Store");

		jButton_KeyStore.setText("upload file");
		jButton_KeyStore.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_KeyStoreActionPerformed(evt);
			}
		});

		jComboBox_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
		jComboBox_Type.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBox_TypeActionPerformed(evt);
			}
		});

		jButton_Cipher.setText("Cipher");
		jButton_Cipher.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_CipherActionPerformed(evt);
			}
		});

		jButton_loadKey.setText("Load Key");
		jButton_loadKey.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_loadKeyActionPerformed(evt);
			}
		});

		jComboBox_aliases.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
		jComboBox_aliases.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBox_aliasesActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup().addGap(39, 39, 39)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(jLabel_Output, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel_Passwod, javax.swing.GroupLayout.DEFAULT_SIZE, 118,
												Short.MAX_VALUE)
										.addComponent(jLabel_KeyStore, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jLabel_Type, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
						.addComponent(jLabel_Input, javax.swing.GroupLayout.Alignment.TRAILING,
								javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup().addComponent(jButton_GenerateKey)
												.addGap(74, 74, 74)
												.addComponent(jButton_Sign, javax.swing.GroupLayout.PREFERRED_SIZE, 121,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(81, 81, 81)
												.addComponent(jButton_Validator, javax.swing.GroupLayout.PREFERRED_SIZE,
														131, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jButton_Cipher, javax.swing.GroupLayout.PREFERRED_SIZE,
														112, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(jTextField_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 772,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jTextField_Output).addComponent(jTextField_KeyStore))
								.addGap(52, 52, 52)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(jButton_Input, javax.swing.GroupLayout.DEFAULT_SIZE, 136,
												Short.MAX_VALUE)
										.addComponent(jButton_Output, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jButton_KeyStore, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(
												jButton_loadKey, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addGap(55, 55, 55))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(jPasswordField_Password)
										.addComponent(jComboBox_Type, 0, 367, Short.MAX_VALUE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(jComboBox_aliases, 0, 342, Short.MAX_VALUE)
										.addComponent(jComboBox_alg, 0, javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE))
								.addGap(243, 243, 243)))));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap(53, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jTextField_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel_Input, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jButton_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(39, 39, 39)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jTextField_Output, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel_Output, javax.swing.GroupLayout.PREFERRED_SIZE, 42,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Output, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(43, 43, 43)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jTextField_KeyStore, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_KeyStore, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel_KeyStore, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(42, 42, 42)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel_Passwod, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jPasswordField_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jComboBox_aliases, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_loadKey, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(33, 33, 33)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jComboBox_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 41,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jComboBox_alg, javax.swing.GroupLayout.PREFERRED_SIZE, 41,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 41,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jButton_GenerateKey, javax.swing.GroupLayout.PREFERRED_SIZE, 58,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Sign, javax.swing.GroupLayout.PREFERRED_SIZE, 58,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Validator, javax.swing.GroupLayout.PREFERRED_SIZE, 58,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Cipher, javax.swing.GroupLayout.PREFERRED_SIZE, 58,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(55, 55, 55)));

		pack();
	}// </editor-fold>

	private void jPasswordField_PasswordActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jComboBox_algActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jButton_InputActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser chooser = new JFileChooser();
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			fileNameInput = chooser.getSelectedFile().getAbsolutePath();
		}
		jTextField_Input.setText(fileNameInput);
	}

	private void jButton_OutputActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser chooser = new JFileChooser();
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			fileNameOutput = chooser.getSelectedFile().getAbsolutePath();
		}
		jTextField_Output.setText(fileNameOutput);
	}

	private void jButton_GenerateKeyActionPerformed(java.awt.event.ActionEvent evt) {
		GenerateKey generateKey = new GenerateKey();
		generateKey.setVisible(true);
		generateKey.setUsername2(userName2);
		this.setVisible(false);
	}

	private void jButton_SignActionPerformed(java.awt.event.ActionEvent evt) {
		fileNameInput = jTextField_Input.getText().toString().trim();
		fileNameOutput = jTextField_Output.getText().toString().trim();
		fileNameInput = fileNameInput.replaceAll("\\\\", "/");
		fileNameOutput = fileNameOutput.replaceAll("\\\\", "/");
		fileKeyStore = jTextField_KeyStore.getText().toString().trim();
		fileKeyStore = fileKeyStore.replaceAll("\\\\", "/");
		String password = new String(jPasswordField_Password.getPassword()).toString().trim();
		if ("".equals(fileNameInput) || "".equals(fileNameOutput) || "".equals(fileKeyStore) || "".equals(password)) {
			JOptionPane.showMessageDialog(this, "Thiếu dữ liệu đầu vào");
		} else {
			try {
				// 11111_ecdsa
				int itemType = jComboBox_Type.getSelectedIndex();
				type = jComboBox_Type.getItemAt(itemType);
				int itemAlg = jComboBox_alg.getSelectedIndex();
				alg = jComboBox_alg.getItemAt(itemAlg);
				String alg2 = alg;
				System.out.println("alg:" + alg);
//				String password = new String(jPasswordField_Password.getPassword()).toString().trim();
				String userName = DangNhap.userName;
				if (userName2 == null) {
					userName2 = "11111";
				}
				if (alg.contains("ECDSA")) {
					alg = "ecdsa";
				} else if (alg.contains("DSA")) {
					alg = "dsa";
				} else if (alg.contains("RSA")) {
					alg = "rsa";
				}
				userName = userName2 + "_" + alg;
				System.out.println("userName:" + userName);
				int indexItem = jComboBox_aliases.getSelectedIndex();
				userName = jComboBox_aliases.getItemAt(indexItem);
				boolean check2 = KeyStoreUtils.checkKey(fileKeyStore, password, userName.toLowerCase());
				if (!check2) {
					JOptionPane.showMessageDialog(this, "Không tìm thấy Key, Tạo key đi");
					return;
				}
				CryptoToken cryptoToken = KeyStoreUtils.getCryptoToken(fileKeyStore, password, userName.toLowerCase());
//				System.out.println(cryptoToken.getCert());
//				System.out.println("type:"+type);

				File file = new File(fileNameOutput);
				if (!file.exists()) {
					file.createNewFile();
//					file.
				}
//				System.out.println("alg2:"+alg2);
				if (type.equals("xml")) {
					XMLSigner signer = new XMLSigner();
//					fileNameInput = fileNameInput.replaceAll("\\\\", "/");
//					System.out.println("fileNameInput:"+fileNameInput);
					byte[] dataSigned = signer.sign(fileNameInput, cryptoToken, alg2);
					FileOutputStream os = new FileOutputStream(fileNameOutput);
					System.out.println(new String(dataSigned));
					os.write(dataSigned);
					os.close();
				} else if (type.equals("pdf")) {
					byte[] dataSigned = null;
					PDFSigner signer = new PDFSigner();
					String image = "D:\\chukytay.jpg";
//					userName = "khaipt";
					FileInputStream is = new FileInputStream(fileNameInput);
					byte[] dataToSign = new byte[is.available()];
					is.read(dataToSign);
					is.close();
					byte[] images2 = null;
					FileInputStream is2 = new FileInputStream(image);
					images2 = new byte[is2.available()];
					is2.read(images2);
					is2.close();
					String imageBase64 = java.util.Base64.getEncoder().encodeToString(images2);
//					signer.sign(fileNameInput, fileNameOutput, image, fileKeyStore, password, userName);
//					signer.sign2(dataToSign, null, null, alg2, password, null, userName, image)
					dataSigned = signer.processData(dataToSign, cryptoToken, alg2, imageBase64);
					FileOutputStream os = new FileOutputStream(fileNameOutput);
					os.write(dataSigned);
					os.close();
//					return dataSigned;
				} else if (type.equals("ooxml")) {
					DOCSigner signer = new DOCSigner();
					byte[] dataSigned = signer.sign(fileNameInput, cryptoToken, alg2);
					FileOutputStream os = new FileOutputStream(fileNameOutput);
					os.write(dataSigned);
					os.close();
				}
				JOptionPane.showMessageDialog(this, "Ký số thành công\n" + fileNameOutput);
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Xảy ra lỗi khi ký số");
				e.printStackTrace();
			}
		}

	}

	private void jButton_ValidatorActionPerformed(java.awt.event.ActionEvent evt) {
		fileNameInput = jTextField_Input.getText().toString().trim();
		fileNameInput = fileNameInput.replaceAll("\\\\", "/");
		if ("".equals(fileNameInput)) {
			JOptionPane.showMessageDialog(this, "Thiếu dữ liệu đầu vào");
		} else {
			try {
				int itemType = jComboBox_Type.getSelectedIndex();
				type = jComboBox_Type.getItemAt(itemType);
				int itemAlg = jComboBox_alg.getSelectedIndex();
				alg = jComboBox_alg.getItemAt(itemAlg);
//				String password = new String(jPasswordField_Password.getPassword()).toString().trim();
//				String userName = DangNhap.userName;
//				if (DangNhap.userName == null) {
//					userName = "keystore";
//				}
//				CryptoToken cryptoToken = KeyStoreUtils.getCryptoToken(fileKeyStore, password, DangNhap.userName);
//				String extention = fileNameInput.
				if (type.equals("xml")) {
					XMLValidator validator = new XMLValidator();
					boolean validator2 = validator.validator(fileNameInput);
					if (!validator2) {
						JOptionPane.showMessageDialog(this, "Dữ liệu bị thay đổi");
					} else if (validator2) {
						JOptionPane.showMessageDialog(this, "Chữ ký toàn vẹn");
					}
				} else if (type.equals("pdf")) {
					PDFSigner signer = new PDFSigner();
					boolean validator2 = signer.validator(fileNameInput);
					if (!validator2) {
						JOptionPane.showMessageDialog(this, "Dữ liệu bị thay đổi");
					} else if (validator2) {
						JOptionPane.showMessageDialog(this, "Chữ ký toàn vẹn");
					}
				} else if (type.equals("ooxml")) {
					DOCSigner signer = new DOCSigner();
					VerifyResult verifyResult = signer.verify(fileNameInput);
					if (verifyResult.equals(VerifyResult.Success)) {
						JOptionPane.showMessageDialog(this, "Chữ ký toàn vẹn");
					} else {
						JOptionPane.showMessageDialog(this, "Dữ liệu bị thay đổi");
					}
//					JOptionPane.showMessageDialog(this, verifyResult);
				}
//				JOptionPane.showMessageDialog(this, "Ký số thành công");
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Xảy ra lỗi khi xác thực");
				e.printStackTrace();
			}
		}

	}

	private void jButton_KeyStoreActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser chooser = new JFileChooser();
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			fileKeyStore = chooser.getSelectedFile().getAbsolutePath();
		}
		jTextField_KeyStore.setText(fileKeyStore);
	}

	private void jComboBox_TypeActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jButton_CipherActionPerformed(java.awt.event.ActionEvent evt) {
		CipherService cipherService = new CipherService();
		cipherService.setVisible(true);
		cipherService.setUsername2(userName2);
		this.setVisible(false);
	}

	private void jButton_loadKeyActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			System.out.println("load key");
			String pathKeyStore = "";
			String password = "";
			pathKeyStore = jTextField_KeyStore.getText().toString().trim();
			password = new String(jPasswordField_Password.getPassword()).trim();
			jComboBox_aliases.removeAllItems();
			if ("".equals(pathKeyStore) || "".equals(password)) {
				JOptionPane.showMessageDialog(this, "Nhập đủ thông tin kho khóa");
			} else {
				List listAliases = KeyStoreUtils.loadKey(pathKeyStore, password);
				for (Object object : listAliases) {
					String aliase = (String) object;
					jComboBox_aliases.addItem(aliase);
				}
			}
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Xảy ra lỗi khi lấy key");
			ex.printStackTrace();
		}
	}

	private void jComboBox_aliasesActionPerformed(java.awt.event.ActionEvent evt) {
//		jButton_loadKeyActionPerformed(evt);
//		String pathKeyStore = "";
//		String password = "";
//		pathKeyStore = jTextField_KeyStore.getText().toString().trim();
//		password = new String(jPasswordField_Password.getPassword()).trim();
//		if(!("".equals(pathKeyStore) || "".equals(password))) {
//			int indexItem = jComboBox_aliases.getSelectedIndex();
//	        String aliase = jComboBox_aliases.getItemAt(indexItem);
//	        String alg = KeyStoreUtils.getKeyAlg(aliase, pathKeyStore, password);
//	        jComboBox_alg.removeAllItems();
//	        jComboBox_alg.addItem(alg);
//		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(SignatureService.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(SignatureService.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(SignatureService.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(SignatureService.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new SignatureService().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton jButton_Cipher;
	private javax.swing.JButton jButton_GenerateKey;
	private javax.swing.JButton jButton_Input;
	private javax.swing.JButton jButton_KeyStore;
	private javax.swing.JButton jButton_Output;
	private javax.swing.JButton jButton_Sign;
	private javax.swing.JButton jButton_Validator;
	private javax.swing.JButton jButton_loadKey;
	private javax.swing.JComboBox<String> jComboBox_Type;
	private javax.swing.JComboBox<String> jComboBox_alg;
	private javax.swing.JComboBox<String> jComboBox_aliases;
	private javax.swing.JLabel jLabel_Input;
	private javax.swing.JLabel jLabel_KeyStore;
	private javax.swing.JLabel jLabel_Output;
	private javax.swing.JLabel jLabel_Passwod;
	private javax.swing.JLabel jLabel_Type;
	private javax.swing.JPasswordField jPasswordField_Password;
	private javax.swing.JTextField jTextField_Input;
	private javax.swing.JTextField jTextField_KeyStore;
	private javax.swing.JTextField jTextField_Output;
	// End of variables declaration
}
