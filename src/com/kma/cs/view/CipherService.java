/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kma.cs.view;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import com.kma.cs.model.AlgorithmCrypto;
import com.kma.cs.model.CryptoToken;
import com.kma.cs.model.DatabaseCRUD;
import com.kma.cs.utils.KeyStoreUtils;
import com.kma.cs.utils.SecretKeyAlgorithmUtils;
import java.awt.Font;

/**
 *
 * @author ptkat
 */
public class CipherService extends javax.swing.JFrame {

	private static String fileNameInput, fileNameOutput;
	private static List listAlgorithmCryptoAll;
	private static List listCryptoToken;
	private static CryptoToken cryptoToken;
	private static String algorithmName;
	private static String userId;
	private String userName2;
	JLabel label = new JLabel("Thông báo");

	public void setUsername2(String userName2) {
		this.userName2 = userName2;
	}

	public CipherService() {
		initComponents();
		Font font = new Font("SansSerif", Font.PLAIN, 25);
		jTextField_Input.setFont(font);
		jTextField_KeyStore.setFont(font);
		jTextField_Output.setFont(font);
		jButton_Decrypt.setFont(font);
		jButton_Encrypt.setFont(font);
		jButton_GenerateKey.setFont(font);
		jButton_Input.setFont(font);
		jButton_KeyStore.setFont(font);
		jButton_Output.setFont(font);
		jButton_Signature.setFont(font);
//        Font font2 = new Font("SansSerif", Font.PLAIN, 20);
		jButton_loadKey.setFont(font);
		jLabel_alg.setFont(font);
		jLabel_KeyStore.setFont(font);
		jLabel_Output.setFont(font);
		jLabel_Password.setFont(font);
		jLabel_alg.setFont(font);
		jLabel_Input.setFont(font);
		jPasswordField_Password.setFont(font);
		jComboBox_alg.setFont(font);
		jComboBox_aliases.setFont(font);
		this.setTitle("Cipher");
		this.setFont(font);

		List listAlgorithmCrypto = DatabaseCRUD.getTable("select * from algorithmcrypto", "algorithmcrypto");
		listAlgorithmCryptoAll = listAlgorithmCrypto;
		jComboBox_alg.removeAllItems();
		for (Object object : listAlgorithmCrypto) {
//        	System.out.println(ob);
			AlgorithmCrypto algorithmCrypto = (AlgorithmCrypto) object;
			jComboBox_alg.addItem(algorithmCrypto.getAlgorithmName());
		}
		String sqlSelect = "select * from cryptotoken;";
		listCryptoToken = DatabaseCRUD.getTable(sqlSelect, "algorithmcrypto");
		userId = DangNhap.userId;
		for (Object object : listCryptoToken) {
			CryptoToken cryptoTokenObject = (CryptoToken) object;
			if (cryptoTokenObject.getUserId().equalsIgnoreCase(userId)) {
				cryptoToken = cryptoTokenObject;
				break;
			}
		}
		this.setLocation(400, 150);
//		this.setSize(1000, 500);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel_Output = new javax.swing.JLabel();
		jLabel_Input = new javax.swing.JLabel();
		jButton_KeyStore = new javax.swing.JButton();
		jButton_Input = new javax.swing.JButton();
		jButton_Encrypt = new javax.swing.JButton();
		jButton_GenerateKey = new javax.swing.JButton();
		jButton_Decrypt = new javax.swing.JButton();
		jLabel_Password = new javax.swing.JLabel();
		jPasswordField_Password = new javax.swing.JPasswordField();
		jTextField_Output = new javax.swing.JTextField();
		jTextField_Input = new javax.swing.JTextField();
		jComboBox_alg = new javax.swing.JComboBox<>();
		jLabel_KeyStore = new javax.swing.JLabel();
		jTextField_KeyStore = new javax.swing.JTextField();
		jButton_Output = new javax.swing.JButton();
		jButton_Signature = new javax.swing.JButton();
		jComboBox_aliases = new javax.swing.JComboBox<>();
		jButton_loadKey = new javax.swing.JButton();
		jLabel_alg = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel_Output.setText("Output");

		jLabel_Input.setText("Input");

		jButton_KeyStore.setText("upload file");
		jButton_KeyStore.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_KeyStoreActionPerformed(evt);
			}
		});

		jButton_Input.setText("upload file");
		jButton_Input.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_InputActionPerformed(evt);
			}
		});

		jButton_Encrypt.setText("Encrypt");
		jButton_Encrypt.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_EncryptActionPerformed(evt);
			}
		});

		jButton_GenerateKey.setText("Generate Key");
		jButton_GenerateKey.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_GenerateKeyActionPerformed(evt);
			}
		});

		jButton_Decrypt.setText("Decrypt");
		jButton_Decrypt.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_DecryptActionPerformed(evt);
			}
		});

		jLabel_Password.setText("Password");

		jPasswordField_Password.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jPasswordField_PasswordActionPerformed(evt);
			}
		});

		jTextField_Output.setText("");

		jTextField_Input.setText("");

		jComboBox_alg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
		jComboBox_alg.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBox_algActionPerformed(evt);
			}
		});

		jLabel_KeyStore.setText("Key Store");

		jTextField_KeyStore.setText("");

		jButton_Output.setText("upload file");
		jButton_Output.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_OutputActionPerformed(evt);
			}
		});

		jButton_Signature.setText("Signature");
		jButton_Signature.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_SignatureActionPerformed(evt);
			}
		});

		jComboBox_aliases.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

		jButton_loadKey.setText("Load Key");
		jButton_loadKey.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_loadKeyActionPerformed(evt);
			}
		});

		jLabel_alg.setText("Alg");
//		this.set
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addGap(35, 35, 35)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
						.addComponent(jLabel_Input, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jLabel_Output, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jLabel_KeyStore, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
						.addComponent(jLabel_Password, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jLabel_alg, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addGap(45, 45, 45)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
						.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jTextField_KeyStore, javax.swing.GroupLayout.DEFAULT_SIZE, 649,
										Short.MAX_VALUE)
								.addComponent(jTextField_Output).addComponent(jTextField_Input))
						.addGap(48, 48, 48)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jButton_loadKey, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jButton_KeyStore, javax.swing.GroupLayout.DEFAULT_SIZE, 121,
										Short.MAX_VALUE)
								.addComponent(jButton_Output, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jButton_Input, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addGroup(layout.createSequentialGroup().addComponent(jButton_GenerateKey)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jButton_Encrypt, javax.swing.GroupLayout.PREFERRED_SIZE,
														132, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(jComboBox_alg, javax.swing.GroupLayout.PREFERRED_SIZE, 268,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jPasswordField_Password, javax.swing.GroupLayout.PREFERRED_SIZE,
												315, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(27, 27, 27)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup().addGap(19, 19, 19)
												.addComponent(jButton_Decrypt, javax.swing.GroupLayout.PREFERRED_SIZE,
														134, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(60, 60, 60).addComponent(jButton_Signature,
														javax.swing.GroupLayout.PREFERRED_SIZE, 142,
														javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(jComboBox_aliases, javax.swing.GroupLayout.PREFERRED_SIZE, 307,
												javax.swing.GroupLayout.PREFERRED_SIZE))))
				.addGap(0, 95, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(60, 60, 60)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jButton_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 44,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jTextField_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 44,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 44,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(23, 23, 23)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jTextField_Output, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Output, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel_Output, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(27, 27, 27)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel_KeyStore, javax.swing.GroupLayout.PREFERRED_SIZE, 44,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jTextField_KeyStore, javax.swing.GroupLayout.PREFERRED_SIZE, 44,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_KeyStore, javax.swing.GroupLayout.PREFERRED_SIZE, 44,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(41, 41, 41)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 41,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jPasswordField_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 41,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jComboBox_aliases, javax.swing.GroupLayout.PREFERRED_SIZE, 42,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_loadKey, javax.swing.GroupLayout.PREFERRED_SIZE, 42,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(37, 37, 37)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel_alg, javax.swing.GroupLayout.PREFERRED_SIZE, 39,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jComboBox_alg, javax.swing.GroupLayout.PREFERRED_SIZE, 39,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jButton_GenerateKey, javax.swing.GroupLayout.PREFERRED_SIZE, 49,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 49,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 49,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton_Signature, javax.swing.GroupLayout.PREFERRED_SIZE, 49,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(121, 121, 121)));

		pack();
	}// </editor-fold>

	private void jPasswordField_PasswordActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jButton_InputActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser chooser = new JFileChooser();
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			fileNameInput = chooser.getSelectedFile().getAbsolutePath();
		}
		jTextField_Input.setText(fileNameInput);
	}

	private void jButton_KeyStoreActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser chooser = new JFileChooser();
		String keyStore = "";
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			keyStore = chooser.getSelectedFile().getAbsolutePath();
		}
		jTextField_KeyStore.setText(keyStore);
	}

	private void jButton_GenerateKeyActionPerformed(java.awt.event.ActionEvent evt) {
		GenerateKey generateKey = new GenerateKey();
		generateKey.setVisible(true);
		generateKey.setUsername2(userName2);
		this.setVisible(false);
	}

	private void jButton_EncryptActionPerformed(java.awt.event.ActionEvent evt) {
		int itemAlgorithmType = jComboBox_alg.getSelectedIndex();
		algorithmName = jComboBox_alg.getItemAt(itemAlgorithmType);
		FileInputStream is = null;
		fileNameInput = jTextField_Input.getText().toString().trim();
		fileNameOutput = jTextField_Output.getText().toString().trim();
		fileNameInput = fileNameInput.replaceAll("\\\\", "/");
		fileNameOutput = fileNameOutput.replaceAll("\\\\", "/");
//		if ("".equals(fileNameInput) || "".equals(fileNameOutput)) {
//			JOptionPane.showMessageDialog(this, "Thiếu dữ liệu đầu vào");
//		}
		File file = new File(fileNameOutput);
		if (userName2 == null) {
			userName2 = "11111";
		}
		String userName3 = userName2 + "_" + algorithmName;

		String path = jTextField_KeyStore.getText().toString().trim();
		String password = new String(jPasswordField_Password.getPassword()).toString().trim();
		if ("".equals(fileNameInput) || "".equals(fileNameOutput) || "".equals(path) || "".equals(password)) {
			JOptionPane.showMessageDialog(this, "Thiếu dữ liệu đầu vào");
		} else {
			if (!file.exists()) {
				try {
					file.createNewFile();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
//				file.
			}
			try {
				is = new FileInputStream(fileNameInput);
				byte[] data = new byte[is.available()];
				is.read(data);
				is.close();
//				String path = cryptoToken.getPathKey();
//				String password = cryptoToken.getPassKey();

				int indexItem = jComboBox_aliases.getSelectedIndex();
				userName3 = jComboBox_aliases.getItemAt(indexItem);
				boolean check2 = KeyStoreUtils.checkKey(path, password, userName3.toLowerCase());
				if (!check2) {
					JOptionPane.showMessageDialog(this, "Không tìm thấy Key, Tạo key đi");
					return;
				}
				if (path.equals("") || password.equals("")) {
					path = cryptoToken.getPathKey();
					password = cryptoToken.getPassKey();

				}
//				SecretKey secretKey = KeyStoreUtils.getSecretKey(path, password, algorithmName);
				System.out.println("userName3:" + userName3);
				SecretKey secretKey = KeyStoreUtils.getSecretKey(path, password, userName3);
				byte[] dataEncrypted = SecretKeyAlgorithmUtils.encryptData(secretKey, data, algorithmName);
				if (dataEncrypted == null) {
					JOptionPane.showMessageDialog(this, "Xảy ra lỗi khi mã hóa");
				}
				FileOutputStream os = new FileOutputStream(fileNameOutput);
				os.write(java.util.Base64.getEncoder().encode(dataEncrypted));
				os.close();
//				System.out.println("algorithmName:"+algorithmName);
				JOptionPane.showMessageDialog(this, "Mã hóa thành công\n" + fileNameOutput);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				JOptionPane.showMessageDialog(this, "Không tìm thấy file");
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(this, "Kiểm tra thuật toán và khóa");
				ex.printStackTrace();
			}
		}

	}

	private void jButton_DecryptActionPerformed(java.awt.event.ActionEvent evt) {
		int itemAlgorithmType = jComboBox_alg.getSelectedIndex();
		algorithmName = jComboBox_alg.getItemAt(itemAlgorithmType);
		FileInputStream is = null;
		fileNameInput = jTextField_Input.getText().toString().trim();
		fileNameOutput = jTextField_Output.getText().toString().trim();
		fileNameInput = fileNameInput.replaceAll("\\\\", "/");
		fileNameOutput = fileNameOutput.replaceAll("\\\\", "/");
//		if ("".equals(fileNameInput) || "".equals(fileNameOutput)) {
//			JOptionPane.showMessageDialog(this, "Thiếu dữ liệu đầu vào");
//		}

		if (userName2 == null) {
			userName2 = "11111";
		}
		String userName3 = userName2 + "_" + algorithmName;
		int indexItem = jComboBox_aliases.getSelectedIndex();
		userName3 = jComboBox_aliases.getItemAt(indexItem);
		String path = jTextField_KeyStore.getText().toString().trim();
		String password = new String(jPasswordField_Password.getPassword()).toString().trim();
		if ("".equals(fileNameInput) || "".equals(fileNameOutput) || "".equals(path) || "".equals(password)) {
			JOptionPane.showMessageDialog(this, "Thiếu dữ liệu đầu vào");
		} else {
			File file = new File(fileNameOutput);
			if (!file.exists()) {
				try {
					file.createNewFile();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
//				file.
			}
			try {
				is = new FileInputStream(fileNameInput);
				byte[] data = new byte[is.available()];
				is.read(data);
				is.close();
				String dataString = new String(data);
				data = java.util.Base64.getDecoder().decode(dataString);
//				data = java.util.Base64.getMimeDecoder().de

				boolean check2 = KeyStoreUtils.checkKey(path, password, userName3.toLowerCase());
				if (!check2) {
					JOptionPane.showMessageDialog(this, "Không tìm thấy Key, Tạo key đi");
					return;
				}
				if (path.equals("") || password.equals("")) {
					path = cryptoToken.getPathKey();
					password = cryptoToken.getPassKey();

				}
//				SecretKey secretKey = KeyStoreUtils.getSecretKey(path, password, algorithmName);
				SecretKey secretKey = KeyStoreUtils.getSecretKey(path, password, userName3);
				byte[] dataEncrypted = SecretKeyAlgorithmUtils.decryptData(secretKey, data, algorithmName);
				FileOutputStream os = new FileOutputStream(fileNameOutput);
				os.write(dataEncrypted);
				os.close();
				JOptionPane.showMessageDialog(this, "Giải hóa thành công\n" + fileNameOutput);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	private void jButton_OutputActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser chooser = new JFileChooser();
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			fileNameOutput = chooser.getSelectedFile().getAbsolutePath();
		}
		jTextField_Output.setText(fileNameOutput);
	}

	private void jComboBox_algActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jButton_SignatureActionPerformed(java.awt.event.ActionEvent evt) {
		SignatureService signatureService = new SignatureService();
		signatureService.setVisible(true);
		signatureService.setUsername2(userName2);
		this.setVisible(false);
	}

	private void jButton_loadKeyActionPerformed(java.awt.event.ActionEvent evt) {
//		JOptionPane.showMessageDialog(this, "Xảy ra lỗi khi lấy key");
		try {
			System.out.println("load key");
			String pathKeyStore = "";
			String password = "";
			pathKeyStore = jTextField_KeyStore.getText().toString().trim();
			password = new String(jPasswordField_Password.getPassword()).trim();
			jComboBox_aliases.removeAllItems();
			if ("".equals(pathKeyStore) || "".equals(password)) {
				JOptionPane.showMessageDialog(this, "Nhập đủ thông tin kho khóa");
			} else {
				List listAliases = KeyStoreUtils.loadKey(pathKeyStore, password);
				for (Object object : listAliases) {
					String aliase = (String) object;
					jComboBox_aliases.addItem(aliase);
				}
			}
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Xảy ra lỗi khi lấy key");
			ex.printStackTrace();
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CipherService.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CipherService.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CipherService.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CipherService.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new CipherService().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton jButton_Decrypt;
	private javax.swing.JButton jButton_Encrypt;
	private javax.swing.JButton jButton_GenerateKey;
	private javax.swing.JButton jButton_Input;
	private javax.swing.JButton jButton_KeyStore;
	private javax.swing.JButton jButton_Output;
	private javax.swing.JButton jButton_Signature;
	private javax.swing.JButton jButton_loadKey;
	private javax.swing.JComboBox<String> jComboBox_alg;
	private javax.swing.JComboBox<String> jComboBox_aliases;
	private javax.swing.JLabel jLabel_Input;
	private javax.swing.JLabel jLabel_KeyStore;
	private javax.swing.JLabel jLabel_Output;
	private javax.swing.JLabel jLabel_Password;
	private javax.swing.JLabel jLabel_alg;
	private javax.swing.JPasswordField jPasswordField_Password;
	private javax.swing.JTextField jTextField_Input;
	private javax.swing.JTextField jTextField_KeyStore;
	private javax.swing.JTextField jTextField_Output;
	// End of variables declaration
}
